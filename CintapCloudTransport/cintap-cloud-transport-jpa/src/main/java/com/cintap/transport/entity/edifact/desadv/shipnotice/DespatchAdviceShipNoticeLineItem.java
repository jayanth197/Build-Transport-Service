package com.cintap.transport.entity.edifact.desadv.shipnotice;
// Generated May 11, 2022 4:17:20 PM by Hibernate Tools 5.2.12.Final

import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

/**
 * EdifactDesadvHeader generated by hbm2java
 */
@Entity
@Table(name = "edifact_desadv_ship_notice_line_item", catalog = "cintap_transport")
@Builder
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
public class DespatchAdviceShipNoticeLineItem implements java.io.Serializable {

	private static final long serialVersionUID = 6802960275302676183L;

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	private Integer id;

	@Column(name = "is_wood")
	private boolean isWood;
	
	@Column(name = "is_lithium")
	private boolean isLithium;
	
	@Column(name = "is_hazardous")
	private boolean isHazardous;
	
	@Column(name = "item_type")
	private String itemType;

	@Column(name = "item_serial")
	private String itemSerial;

	@Column(name = "carton_count")
	private String cartonCount;

	@Column(name = "item_number")
	private String itemNumber;

	@Column(name = "gross_weight_kg")
	private String grossWeightKg;

	@Column(name = "gross_weight_lb")
	private String grossWeightLb;
	
	@Column(name = "net_weight_kg")
	private String netWeightKg;
	
	@Column(name = "net_weight_lb")
	private String netWeightLb;
	
	@Column(name = "length_inch")
	private String lengthInch;
	
	@Column(name = "length_cm")
	private String lengthCm;

	@Column(name = "width_inch")
	private String widthInch;
	
	@Column(name = "width_cm")
	private String widthCm;
	
	@Column(name = "height_inch")
	private String heightInch;
	
	@Column(name = "height_cm")
	private String heightCm;
	
	@Column(name = "remarks")
	private String remarks;	
	
	@ManyToOne
	@JoinColumn(name = "header_id")
	@JsonIgnoreProperties("lstDesadvShipNoitceLineItem")
	private DespatchAdviceShipNoticeHeader despatchAdviceShipNoticeHeader;
	
	@LazyCollection(LazyCollectionOption.FALSE)
	@OneToMany(cascade = CascadeType.ALL, mappedBy = "despatchAdviceShipNoticeLineItem", fetch = FetchType.LAZY)
	@JsonIgnoreProperties("despatchAdviceShipNoticeLineItem")
	private List<DespatchAdviceShipNoticeLineItemCarton> lstDesadvShipNoitceLineItemCarton;

	public void addDespatchAdviceShipNoticeLineItemCarton(DespatchAdviceShipNoticeLineItemCarton despatchAdviceShipNoticeLineItemCarton) {
		if (despatchAdviceShipNoticeLineItemCarton == null) {
			return;
		}
		despatchAdviceShipNoticeLineItemCarton.setDespatchAdviceShipNoticeLineItem(this);
		if (lstDesadvShipNoitceLineItemCarton == null || lstDesadvShipNoitceLineItemCarton.isEmpty()) {
			lstDesadvShipNoitceLineItemCarton = new ArrayList<>();
			lstDesadvShipNoitceLineItemCarton.add(despatchAdviceShipNoticeLineItemCarton);
		} else if (!lstDesadvShipNoitceLineItemCarton.contains(despatchAdviceShipNoticeLineItemCarton)) {
			lstDesadvShipNoitceLineItemCarton.add(despatchAdviceShipNoticeLineItemCarton);
		}
	}

}
