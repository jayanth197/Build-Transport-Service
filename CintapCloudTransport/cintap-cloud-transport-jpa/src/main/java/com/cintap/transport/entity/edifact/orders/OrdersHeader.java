package com.cintap.transport.entity.edifact.orders;
// Generated May 11, 2022 4:17:20 PM by Hibernate Tools 5.2.12.Final

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * EdifactDesadvHeader generated by hbm2java
 */
@Entity
@Table(name = "edifact_orders_header", catalog = "cintap_transport")
@Builder
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class OrdersHeader implements java.io.Serializable {

	private static final long serialVersionUID = 6802960275302676183L;

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	private Integer id;

	@Column(name = "bpi_log_id")
	private Integer bpiLogId;

	@Column(name = "sender_partner_id", length = 50)
	private String senderPartnerId;

	@Column(name = "receiver_partner_id", length = 50)
	private String receiverPartnerId;

	@Column(name = "sender_address", length = 50)
	private String senderAddress;

	@Column(name = "receiver_address", length = 50)
	private String receiverAddress;

	@Column(name = "sender_qualifier", length = 50)
	private String senderQualifier;

	@Column(name = "receiver_qualifier", length = 50)
	private String receiverQualifier;

	@Column(name = "creation_date", length = 50)
	private String creationDate;

	@Column(name = "creation_time", length = 50)
	private String creationTime;

	@Column(name = "interchange_control_ref", length = 50)
	private String interchangeControlRef;

	@Column(name = "created_date")
	private Date createdDate;

	@Column(name = "created_by", length = 50)
	private String createdBy;

	@Column(name = "updated_date")
	private Date updatedDate;

	@Column(name = "updated_by", length = 50)
	private String updatedBy;
	
	@Column(name = "currency_code", length = 50)
	private String currencyCode;

	@Column(name = "bgm_identifier_ord_change", length = 50)
	private String bgmIdentifierOrderChange;

	@Column(name = "bgm_order", length = 50)
	private String bgmOrder;

	@LazyCollection(LazyCollectionOption.FALSE)
	@OneToMany(cascade = CascadeType.ALL, mappedBy = "ordersHeader", fetch = FetchType.LAZY)
	@JsonIgnoreProperties("ordersHeader")
	private List<OrdersAddress> lstOrdersAddresses;

	public void addOrdersAddress(OrdersAddress ordersAddress) {
		if (ordersAddress == null) {
			return;
		}
		ordersAddress.setOrdersHeader(this);
		if (lstOrdersAddresses == null || lstOrdersAddresses.isEmpty()) {
			lstOrdersAddresses = new ArrayList<>();
			lstOrdersAddresses.add(ordersAddress);
		} else if (!lstOrdersAddresses.contains(ordersAddress)) {
			lstOrdersAddresses.add(ordersAddress);
		}
	}

	@LazyCollection(LazyCollectionOption.FALSE)
	@OneToMany(cascade = CascadeType.ALL, mappedBy = "ordersHeader", fetch = FetchType.LAZY)
	@JsonIgnoreProperties("ordersHeader")
	private List<OrdersFreeText> lstOrdersFreeTexts;

	public void addOrdersFreeText(OrdersFreeText ordersFreeText) {
		if (ordersFreeText == null) {
			return;
		}
		ordersFreeText.setOrdersHeader(this);
		if (lstOrdersFreeTexts == null || lstOrdersFreeTexts.isEmpty()) {
			lstOrdersFreeTexts = new ArrayList<>();
			lstOrdersFreeTexts.add(ordersFreeText);
		} else if (!lstOrdersFreeTexts.contains(ordersFreeText)) {
			lstOrdersFreeTexts.add(ordersFreeText);
		}
	}

	@LazyCollection(LazyCollectionOption.FALSE)
	@OneToMany(cascade = CascadeType.ALL, mappedBy = "ordersHeader", fetch = FetchType.LAZY)
	@JsonIgnoreProperties("ordersHeader")
	private List<OrdersHeaderMessage> lstOrdersHeaderMessages;

	public void addOrdersHeaderMessage(OrdersHeaderMessage ordersHeaderMessage) {
		if (ordersHeaderMessage == null) {
			return;
		}
		ordersHeaderMessage.setOrdersHeader(this);
		if (lstOrdersHeaderMessages == null || lstOrdersHeaderMessages.isEmpty()) {
			lstOrdersHeaderMessages = new ArrayList<>();
			lstOrdersHeaderMessages.add(ordersHeaderMessage);
		} else if (!lstOrdersHeaderMessages.contains(ordersHeaderMessage)) {
			lstOrdersHeaderMessages.add(ordersHeaderMessage);
		}
	}

	@LazyCollection(LazyCollectionOption.FALSE)
	@OneToMany(cascade = CascadeType.ALL, mappedBy = "ordersHeader", fetch = FetchType.LAZY)
	@JsonIgnoreProperties("ordersHeader")
	private List<OrdersLineItem> lstOrdersLineItem;

	public void addOrdersLineItem(OrdersLineItem ordersLineItems) {
		if (ordersLineItems == null) {
			return;
		}
		ordersLineItems.setOrdersHeader(this);
		if (lstOrdersLineItem == null || lstOrdersLineItem.isEmpty()) {
			lstOrdersLineItem = new ArrayList<>();
			lstOrdersLineItem.add(ordersLineItems);
		} else if (!lstOrdersLineItem.contains(ordersLineItems)) {
			lstOrdersLineItem.add(ordersLineItems);
		}
	}

	@LazyCollection(LazyCollectionOption.FALSE)
	@OneToMany(cascade = CascadeType.ALL, mappedBy = "ordersHeader", fetch = FetchType.LAZY)
	@JsonIgnoreProperties("ordersHeader")
	private List<OrdersMessageDateTime> lstOrdersMessageDateTime;

	public void addOrdersMessageDateTime(OrdersMessageDateTime ordersMessageDateTime) {
		if (ordersMessageDateTime == null) {
			return;
		}
		ordersMessageDateTime.setOrdersHeader(this);
		if (lstOrdersMessageDateTime == null || lstOrdersMessageDateTime.isEmpty()) {
			lstOrdersMessageDateTime = new ArrayList<>();
			lstOrdersMessageDateTime.add(ordersMessageDateTime);
		} else if (!lstOrdersMessageDateTime.contains(ordersMessageDateTime)) {
			lstOrdersMessageDateTime.add(ordersMessageDateTime);
		}
	}

	@LazyCollection(LazyCollectionOption.FALSE)
	@OneToMany(cascade = CascadeType.ALL, mappedBy = "ordersHeader", fetch = FetchType.LAZY)
	@JsonIgnoreProperties("ordersHeader")
	private List<OrdersReference> lstOrdersReference;

	public void addOrdersReference(OrdersReference ordersReference) {
		if (ordersReference == null) {
			return;
		}
		ordersReference.setOrdersHeader(this);
		if (lstOrdersReference == null || lstOrdersReference.isEmpty()) {
			lstOrdersReference = new ArrayList<>();
			lstOrdersReference.add(ordersReference);
		} else if (!lstOrdersReference.contains(ordersReference)) {
			lstOrdersReference.add(ordersReference);
		}
	}


}
