package com.cintap.transport.entity.edifact.desadv.shipnotice;
// Generated May 11, 2022 4:17:20 PM by Hibernate Tools 5.2.12.Final

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

/**
 * EdifactDesadvHeader generated by hbm2java
 */
@Entity
@Table(name = "edifact_desadv_ship_notice_header", catalog = "cintap_transport")
@Builder
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
public class DespatchAdviceShipNoticeHeader implements java.io.Serializable {

	private static final long serialVersionUID = 6802960275302676183L;

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	private Integer id;

	@Column(name = "bpi_log_id")
	private Integer bpiLogId;

	@Column(name = "tenant_id")
	private String tenantId;

	@Column(name = "sender_code")
	private String senderCode;

	@Column(name = "receiver_code")
	private String receiverCode;
	
	@Column(name = "document_creation_date")
	private String documentCreationDate;
	
	@Column(name = "message_reference")
	private String messageReference;

	@Column(name = "identification")
	private String identification;
	
	@Column(name = "document_name")
	private String documentName;
	
	@Column(name = "created_date")
	private Timestamp createdDate;
	
	@Column(name = "updated_date")
	private Timestamp updatedDate;
	
	@LazyCollection(LazyCollectionOption.FALSE)
	@OneToMany(cascade = CascadeType.ALL, mappedBy = "despatchAdviceShipNoticeHeader", fetch = FetchType.LAZY)
	@JsonIgnoreProperties("despatchAdviceShipNoticeHeader")
	private List<DespatchAdviceShipNoticeHeaderReference> lstDesadvShipNoitceHeaderReference;

	public void addDespatchAdviceShipNoticeHeaderReference(DespatchAdviceShipNoticeHeaderReference despatchAdviceShipNoticeHeaderReference) {
		if (despatchAdviceShipNoticeHeaderReference == null) {
			return;
		}
		despatchAdviceShipNoticeHeaderReference.setDespatchAdviceShipNoticeHeader(this);
		if (lstDesadvShipNoitceHeaderReference == null || lstDesadvShipNoitceHeaderReference.isEmpty()) {
			lstDesadvShipNoitceHeaderReference = new ArrayList<>();
			lstDesadvShipNoitceHeaderReference.add(despatchAdviceShipNoticeHeaderReference);
		} else if (!lstDesadvShipNoitceHeaderReference.contains(despatchAdviceShipNoticeHeaderReference)) {
			lstDesadvShipNoitceHeaderReference.add(despatchAdviceShipNoticeHeaderReference);
		}
	}

	@LazyCollection(LazyCollectionOption.FALSE)
	@OneToMany(cascade = CascadeType.ALL, mappedBy = "despatchAdviceShipNoticeHeader", fetch = FetchType.LAZY)
	@JsonIgnoreProperties("despatchAdviceShipNoticeHeader")
	private List<DespatchAdviceShipNoticeShipment> lstDesadvShipNoitceShipment;
	
	public void addDespatchAdviceShipNoticeShipment(DespatchAdviceShipNoticeShipment despatchAdviceShipNoticeShipment) {
		if (despatchAdviceShipNoticeShipment == null) {
			return;
		}
		despatchAdviceShipNoticeShipment.setDespatchAdviceShipNoticeHeader(this);
		if (lstDesadvShipNoitceShipment == null || lstDesadvShipNoitceShipment.isEmpty()) {
			lstDesadvShipNoitceShipment = new ArrayList<>();
			lstDesadvShipNoitceShipment.add(despatchAdviceShipNoticeShipment);
		} else if (!lstDesadvShipNoitceShipment.contains(despatchAdviceShipNoticeShipment)) {
			lstDesadvShipNoitceShipment.add(despatchAdviceShipNoticeShipment);
		}
	}
	
	@LazyCollection(LazyCollectionOption.FALSE)
	@OneToMany(cascade = CascadeType.ALL, mappedBy = "despatchAdviceShipNoticeHeader", fetch = FetchType.LAZY)
	@JsonIgnoreProperties("despatchAdviceShipNoticeHeader")
	private List<DespatchAdviceShipNoticeLineItem> lstDesadvShipNoitceLineItem;
	
	public void addDespatchAdviceShipNoticeLineItem(DespatchAdviceShipNoticeLineItem despatchAdviceShipNoticeLineItem) {
		if (despatchAdviceShipNoticeLineItem == null) {
			return;
		}
		despatchAdviceShipNoticeLineItem.setDespatchAdviceShipNoticeHeader(this);
		if (lstDesadvShipNoitceLineItem == null || lstDesadvShipNoitceLineItem.isEmpty()) {
			lstDesadvShipNoitceLineItem = new ArrayList<>();
			lstDesadvShipNoitceLineItem.add(despatchAdviceShipNoticeLineItem);
		} else if (!lstDesadvShipNoitceLineItem.contains(despatchAdviceShipNoticeLineItem)) {
			lstDesadvShipNoitceLineItem.add(despatchAdviceShipNoticeLineItem);
		}
	}
	
}
