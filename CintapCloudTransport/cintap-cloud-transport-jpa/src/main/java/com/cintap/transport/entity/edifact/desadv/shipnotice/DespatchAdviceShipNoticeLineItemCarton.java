package com.cintap.transport.entity.edifact.desadv.shipnotice;
// Generated May 11, 2022 4:17:20 PM by Hibernate Tools 5.2.12.Final

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.cintap.transport.entity.edifact.desadv.DespatchAdviceAddress;
import com.cintap.transport.entity.edifact.desadv.DespatchAdviceHeader;
import com.cintap.transport.entity.edifact.desadv.EdifactDesadvFreeText;
import com.cintap.transport.entity.edifact.desadv.EdifactDesadvHeaderMessage;
import com.cintap.transport.entity.edifact.desadv.EdifactDesadvInfo;
import com.cintap.transport.entity.edifact.desadv.EdifactDesadvLineItem;
import com.cintap.transport.entity.edifact.desadv.EdifactDesadvMessageDateTime;
import com.cintap.transport.entity.edifact.desadv.EdifactDesadvReference;
import com.cintap.transport.entity.edifact.desadv.EdifactDesadvSummary;
import com.cintap.transport.entity.edifact.desadv.EdifactDesadvTransportInformation;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

/**
 * EdifactDesadvHeader generated by hbm2java
 */
@Entity
@Table(name = "edifact_desadv_ship_notice_line_item_carton", catalog = "cintap_transport")
@Builder
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
public class DespatchAdviceShipNoticeLineItemCarton implements java.io.Serializable {

	private static final long serialVersionUID = 6802960275302676183L;

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	private Integer id;

	@Column(name = "carton_id")
	private String cartonId;

	@Column(name = "created_date_time")
	private String createdDateTime;

	@Column(name = "is_wood")
	private boolean isWood;
	
	@Column(name = "is_lithium")
	private boolean isLithium;
	
	@Column(name = "is_hazardous")
	private boolean isHazardous;
	
	@Column(name = "condition_code")
	private String conditionCode;

	@Column(name = "customer_condition_code")
	private String customerConditionCode;

	@Column(name = "qcc_person")
	private String qccPerson;
	
	@Column(name = "is_qcc")
	private boolean isQcc;

	@Column(name = "vendor_id")
	private String vendorId;

	@Column(name = "sales_order")
	private String salesOrder;

	@Column(name = "po_number")
	private String poNumber;

	@Column(name = "ship_set")
	private String shipSet;
	
	@Column(name = "vendor_carton_id")
	private String vendorCartonId;

	@Column(name = "gross_weight_kg")
	private String grossWeightKg;

	@Column(name = "gross_weight_lb")
	private String grossWeightLb;

	@Column(name = "inbound_tracking_carrier")
	private String inboundTrackingCarrier;

	@Column(name = "inbound_tracking_carrier_code")
	private String inboundTrackingCarrierCode;

	@ManyToOne
	@JoinColumn(name = "line_item_id")
	@JsonIgnoreProperties("lstDesadvShipNoitceLineItemCarton")
	private DespatchAdviceShipNoticeLineItem despatchAdviceShipNoticeLineItem;
	
	@LazyCollection(LazyCollectionOption.FALSE)
	@OneToMany(cascade = CascadeType.ALL, mappedBy = "despatchAdviceShipNoticeLineItemCarton", fetch = FetchType.LAZY)
	@JsonIgnoreProperties("despatchAdviceShipNoticeLineItemCarton")
	private List<DespatchAdviceShipNoticeLineItemCartonItem> lstDesadvShipNoitceLineItemCartonItem;
	
	public void addDespatchAdviceShipNoticeLineItemCartonItem(DespatchAdviceShipNoticeLineItemCartonItem despatchAdviceShipNoticeLineItemCartonItem) {
		if (despatchAdviceShipNoticeLineItemCartonItem == null) {
			return;
		}
		despatchAdviceShipNoticeLineItemCartonItem.setDespatchAdviceShipNoticeLineItemCarton(this);
		if (lstDesadvShipNoitceLineItemCartonItem == null || lstDesadvShipNoitceLineItemCartonItem.isEmpty()) {
			lstDesadvShipNoitceLineItemCartonItem = new ArrayList<>();
			lstDesadvShipNoitceLineItemCartonItem.add(despatchAdviceShipNoticeLineItemCartonItem);
		} else if (!lstDesadvShipNoitceLineItemCartonItem.contains(despatchAdviceShipNoticeLineItemCartonItem)) {
			lstDesadvShipNoitceLineItemCartonItem.add(despatchAdviceShipNoticeLineItemCartonItem);
		}
	}

}
