package com.cintap.transport.entity.edifact.desadv;
// Generated May 11, 2022 4:17:20 PM by Hibernate Tools 5.2.12.Final

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

/**
 * EdifactDesadvHeader generated by hbm2java
 */
@Entity
@Table(name = "edifact_desadv_header", catalog = "cintap_transport")
@Builder
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
public class DespatchAdviceHeader implements java.io.Serializable {

	private static final long serialVersionUID = 6802960275302676183L;

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	private Integer id;

	@Column(name = "bpi_log_id")
	private Integer bpiLogId;

	@Column(name = "sender_partner_id", length = 50)
	private String senderPartnerId;

	@Column(name = "receiver_partner_id", length = 50)
	private String receiverPartnerId;

	@Column(name = "sender_address", length = 50)
	private String senderAddress;

	@Column(name = "receiver_address", length = 50)
	private String receiverAddress;

	@Column(name = "sender_qualifier", length = 50)
	private String senderQualifier;

	@Column(name = "receiver_qualifier", length = 50)
	private String receiverQualifier;

	@Column(name = "creation_date", length = 50)
	private String creationDate;

	@Column(name = "creation_time", length = 50)
	private String creationTime;

	@Column(name = "interchange_control_ref", length = 50)
	private String interchangeControlRef;

	@Column(name = "created_date")
	private Date createdDate;

	@Column(name = "created_by", length = 50)
	private String createdBy;

	@Column(name = "updated_date")
	private Date updatedDate;

	@Column(name = "updated_by", length = 50)
	private String updatedBy;

	@Column(name = "bgm_doc_name_code", length = 50)
	private String bgmDocNameCode;

	@Column(name = "bgm_doc_msg_number", length = 50)
	private String bgmDocMsgNumber;

	@Column(name = "bgm_version", length = 50)
	private String bgmVersion;

	@LazyCollection(LazyCollectionOption.FALSE)
	@OneToMany(cascade = CascadeType.ALL, mappedBy = "edifactDesadvHeader", fetch = FetchType.LAZY)
	@JsonIgnoreProperties("edifactDesadvHeader")
	private List<DespatchAdviceAddress> lstEdifactDesadvAddresses;

	public void addEdifactDesadvAddress(DespatchAdviceAddress edifactDesadvAddress) {
		if (edifactDesadvAddress == null) {
			return;
		}
		edifactDesadvAddress.setEdifactDesadvHeader(this);
		if (lstEdifactDesadvAddresses == null || lstEdifactDesadvAddresses.isEmpty()) {
			lstEdifactDesadvAddresses = new ArrayList<>();
			lstEdifactDesadvAddresses.add(edifactDesadvAddress);
		} else if (!lstEdifactDesadvAddresses.contains(edifactDesadvAddress)) {
			lstEdifactDesadvAddresses.add(edifactDesadvAddress);
		}
	}

	@LazyCollection(LazyCollectionOption.FALSE)
	@OneToMany(cascade = CascadeType.ALL, mappedBy = "edifactDesadvHeader", fetch = FetchType.LAZY)
	@JsonIgnoreProperties("edifactDesadvHeader")
	private List<EdifactDesadvFreeText> edifactDesadvFreeTexts;

	public void addEdifactDesadvFreeText(EdifactDesadvFreeText edifactDesadvFreeText) {
		if (edifactDesadvFreeText == null) {
			return;
		}
		edifactDesadvFreeText.setEdifactDesadvHeader(this);
		if (edifactDesadvFreeTexts == null || edifactDesadvFreeTexts.isEmpty()) {
			edifactDesadvFreeTexts = new ArrayList<>();
			edifactDesadvFreeTexts.add(edifactDesadvFreeText);
		} else if (!edifactDesadvFreeTexts.contains(edifactDesadvFreeText)) {
			edifactDesadvFreeTexts.add(edifactDesadvFreeText);
		}
	}

	@LazyCollection(LazyCollectionOption.FALSE)
	@OneToMany(cascade = CascadeType.ALL, mappedBy = "edifactDesadvHeader", fetch = FetchType.LAZY)
	@JsonIgnoreProperties("edifactDesadvHeader")
	private List<EdifactDesadvHeaderMessage> edifactDesadvHeaderMessages;

	public void addEdifactDesadvHeaderMessage(EdifactDesadvHeaderMessage edifactDesadvHeaderMessage) {
		if (edifactDesadvHeaderMessage == null) {
			return;
		}
		edifactDesadvHeaderMessage.setEdifactDesadvHeader(this);
		if (edifactDesadvHeaderMessages == null || edifactDesadvHeaderMessages.isEmpty()) {
			edifactDesadvHeaderMessages = new ArrayList<>();
			edifactDesadvHeaderMessages.add(edifactDesadvHeaderMessage);
		} else if (!edifactDesadvHeaderMessages.contains(edifactDesadvHeaderMessage)) {
			edifactDesadvHeaderMessages.add(edifactDesadvHeaderMessage);
		}
	}

	@LazyCollection(LazyCollectionOption.FALSE)
	@OneToMany(cascade = CascadeType.ALL, mappedBy = "edifactDesadvHeader", fetch = FetchType.LAZY)
	@JsonIgnoreProperties("edifactDesadvHeader")
	private List<EdifactDesadvInfo> edifactDesadvInfos;

	public void addEdifactDesadvInfo(EdifactDesadvInfo edifactDesadvInfo) {
		if (edifactDesadvInfo == null) {
			return;
		}
		edifactDesadvInfo.setEdifactDesadvHeader(this);
		if (edifactDesadvInfos == null || edifactDesadvInfos.isEmpty()) {
			edifactDesadvInfos = new ArrayList<>();
			edifactDesadvInfos.add(edifactDesadvInfo);
		} else if (!edifactDesadvInfos.contains(edifactDesadvInfo)) {
			edifactDesadvInfos.add(edifactDesadvInfo);
		}
	}

	@LazyCollection(LazyCollectionOption.FALSE)
	@OneToMany(cascade = CascadeType.ALL, mappedBy = "edifactDesadvHeader", fetch = FetchType.LAZY)
	@JsonIgnoreProperties("edifactDesadvHeader")
	private List<EdifactDesadvLineItem> edifactDesadvLineItems;

	public void addEdifactDesadvLineItem(EdifactDesadvLineItem edifactDesadvLineItem) {
		if (edifactDesadvLineItem == null) {
			return;
		}
		edifactDesadvLineItem.setEdifactDesadvHeader(this);
		if (edifactDesadvLineItems == null || edifactDesadvLineItems.isEmpty()) {
			edifactDesadvLineItems = new ArrayList<>();
			edifactDesadvLineItems.add(edifactDesadvLineItem);
		} else if (!edifactDesadvLineItems.contains(edifactDesadvLineItem)) {
			edifactDesadvLineItems.add(edifactDesadvLineItem);
		}
	}

	@LazyCollection(LazyCollectionOption.FALSE)
	@OneToMany(cascade = CascadeType.ALL, mappedBy = "edifactDesadvHeader", fetch = FetchType.LAZY)
	@JsonIgnoreProperties("edifactDesadvHeader")
	private List<EdifactDesadvMessageDateTime> edifactDesadvMessageDateTimes;

	public void addEdifactDesadvMessageDateTime(EdifactDesadvMessageDateTime edifactDesadvMessageDateTime) {
		if (edifactDesadvMessageDateTime == null) {
			return;
		}
		edifactDesadvMessageDateTime.setEdifactDesadvHeader(this);
		if (edifactDesadvMessageDateTimes == null || edifactDesadvMessageDateTimes.isEmpty()) {
			edifactDesadvMessageDateTimes = new ArrayList<>();
			edifactDesadvMessageDateTimes.add(edifactDesadvMessageDateTime);
		} else if (!edifactDesadvMessageDateTimes.contains(edifactDesadvMessageDateTime)) {
			edifactDesadvMessageDateTimes.add(edifactDesadvMessageDateTime);
		}
	}

	@LazyCollection(LazyCollectionOption.FALSE)
	@OneToMany(cascade = CascadeType.ALL, mappedBy = "edifactDesadvHeader", fetch = FetchType.LAZY)
	@JsonIgnoreProperties("edifactDesadvHeader")
	private List<EdifactDesadvReference> edifactDesadvReferences;

	public void addEdifactDesadvReference(EdifactDesadvReference edifactDesadvReference) {
		if (edifactDesadvReference == null) {
			return;
		}
		edifactDesadvReference.setEdifactDesadvHeader(this);
		if (edifactDesadvReferences == null || edifactDesadvReferences.isEmpty()) {
			edifactDesadvReferences = new ArrayList<>();
			edifactDesadvReferences.add(edifactDesadvReference);
		} else if (!edifactDesadvReferences.contains(edifactDesadvReference)) {
			edifactDesadvReferences.add(edifactDesadvReference);
		}
	}

	@LazyCollection(LazyCollectionOption.FALSE)
	@OneToMany(cascade = CascadeType.ALL, mappedBy = "edifactDesadvHeader", fetch = FetchType.LAZY)
	@JsonIgnoreProperties("edifactDesadvHeader")
	private List<EdifactDesadvSummary> edifactDesadvSummaries;

	public void addEdifactDesadvSummary(EdifactDesadvSummary edifactDesadvSummary) {
		if (edifactDesadvSummary == null) {
			return;
		}
		edifactDesadvSummary.setEdifactDesadvHeader(this);
		if (edifactDesadvSummaries == null || edifactDesadvSummaries.isEmpty()) {
			edifactDesadvSummaries = new ArrayList<>();
			edifactDesadvSummaries.add(edifactDesadvSummary);
		} else if (!edifactDesadvSummaries.contains(edifactDesadvSummary)) {
			edifactDesadvSummaries.add(edifactDesadvSummary);
		}
	}

	@LazyCollection(LazyCollectionOption.FALSE)
	@OneToMany(cascade = CascadeType.ALL, mappedBy = "edifactDesadvHeader", fetch = FetchType.LAZY)
	@JsonIgnoreProperties("edifactDesadvHeader")
	private List<EdifactDesadvTransportInformation> edifactDesadvTransportInformations;

	public void addEdifactDesadvTransportInformation(
			EdifactDesadvTransportInformation edifactDesadvTransportInformation) {
		if (edifactDesadvTransportInformation == null) {
			return;
		}
		edifactDesadvTransportInformation.setEdifactDesadvHeader(this);
		if (edifactDesadvTransportInformations == null || edifactDesadvTransportInformations.isEmpty()) {
			edifactDesadvTransportInformations = new ArrayList<>();
			edifactDesadvTransportInformations.add(edifactDesadvTransportInformation);
		} else if (!edifactDesadvTransportInformations.contains(edifactDesadvTransportInformation)) {
			edifactDesadvTransportInformations.add(edifactDesadvTransportInformation);
		}
	}

	public DespatchAdviceHeader(Integer bpiLogId, String senderPartnerId, String receiverPartnerId) {
		this.bpiLogId = bpiLogId;
		this.senderPartnerId = senderPartnerId;
		this.receiverPartnerId = receiverPartnerId;
	}

}
