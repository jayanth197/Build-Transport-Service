package com.cintap.transport.entity.edifact.desadv.shipnotice;
// Generated May 11, 2022 4:17:20 PM by Hibernate Tools 5.2.12.Final

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.cintap.transport.entity.edifact.desadv.DespatchAdviceAddress;
import com.cintap.transport.entity.edifact.desadv.DespatchAdviceHeader;
import com.cintap.transport.entity.edifact.desadv.EdifactDesadvFreeText;
import com.cintap.transport.entity.edifact.desadv.EdifactDesadvHeaderMessage;
import com.cintap.transport.entity.edifact.desadv.EdifactDesadvInfo;
import com.cintap.transport.entity.edifact.desadv.EdifactDesadvLineItem;
import com.cintap.transport.entity.edifact.desadv.EdifactDesadvMessageDateTime;
import com.cintap.transport.entity.edifact.desadv.EdifactDesadvReference;
import com.cintap.transport.entity.edifact.desadv.EdifactDesadvSummary;
import com.cintap.transport.entity.edifact.desadv.EdifactDesadvTransportInformation;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

/**
 * EdifactDesadvHeader generated by hbm2java
 */
@Entity
@Table(name = "edifact_desadv_ship_notice_shipment", catalog = "cintap_transport")
@Builder
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
public class DespatchAdviceShipNoticeShipment implements java.io.Serializable {

	private static final long serialVersionUID = 6802960275302676183L;

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	private Integer id;
	
	@Column(name = "identification")
	private String identification;

	@Column(name = "status")
	private String status;

	@Column(name = "internal_id")
	private String internalId;

	@Column(name = "primary_contact_name")
	private String primaryContactName;

	@Column(name = "entered_time")
	private String enteredTime;
	
	@Column(name = "picked_time")
	private String pickedTime;
	
	@Column(name = "packaged_time")
	private String packagedTime;
	
	@Column(name = "forwaded_time")
	private String forwadedTime;
	
	@Column(name = "exported_time")
	private String exportedTime;
	
	@Column(name = "sub_total")
	private String subTotal;
	
	@Column(name = "notes")
	private String notes;
	
	@Column(name = "destination_country")
	private String destinationCountry;
	
	@Column(name = "gross_weight_kg")
	private String grossWeightKg;

	@Column(name = "gross_weight_lb")
	private String grossWeightLb;

	@ManyToOne
	@JoinColumn(name = "header_id")
	@JsonIgnoreProperties("lstDesadvShipNoitceShipment")
	private DespatchAdviceShipNoticeHeader despatchAdviceShipNoticeHeader;
	
	@LazyCollection(LazyCollectionOption.FALSE)
	@OneToMany(cascade = CascadeType.ALL, mappedBy = "despatchAdviceShipNoticeShipment", fetch = FetchType.LAZY)
	@JsonIgnoreProperties("despatchAdviceShipNoticeShipment")
	private List<DespatchAdviceShipNoticeShipmentAddress> lstDesadvShipNoitceShipmentAddress;

	public void addDespatchAdviceShipNoticeShipmentAddress(DespatchAdviceShipNoticeShipmentAddress despatchAdviceShipNoticeShipmentAddress) {
		if (despatchAdviceShipNoticeShipmentAddress == null) {
			return;
		}
		despatchAdviceShipNoticeShipmentAddress.setDespatchAdviceShipNoticeShipment(this);
		if (lstDesadvShipNoitceShipmentAddress == null || lstDesadvShipNoitceShipmentAddress.isEmpty()) {
			lstDesadvShipNoitceShipmentAddress = new ArrayList<>();
			lstDesadvShipNoitceShipmentAddress.add(despatchAdviceShipNoticeShipmentAddress);
		} else if (!lstDesadvShipNoitceShipmentAddress.contains(despatchAdviceShipNoticeShipmentAddress)) {
			lstDesadvShipNoitceShipmentAddress.add(despatchAdviceShipNoticeShipmentAddress);
		}
	}
	@LazyCollection(LazyCollectionOption.FALSE)
	@OneToMany(cascade = CascadeType.ALL, mappedBy = "despatchAdviceShipNoticeShipment", fetch = FetchType.LAZY)
	@JsonIgnoreProperties("despatchAdviceShipNoticeShipment")
	private List<DespatchAdviceShipNoticeShipmentReference> lstDesadvShipNoitceShipmentReference;
	
	public void addDespatchAdviceShipNoticeShipmentReference(DespatchAdviceShipNoticeShipmentReference despatchAdviceShipNoticeShipmentReference) {
		if (despatchAdviceShipNoticeShipmentReference == null) {
			return;
		}
		despatchAdviceShipNoticeShipmentReference.setDespatchAdviceShipNoticeShipment(this);
		if (lstDesadvShipNoitceShipmentReference == null || lstDesadvShipNoitceShipmentReference.isEmpty()) {
			lstDesadvShipNoitceShipmentReference = new ArrayList<>();
			lstDesadvShipNoitceShipmentReference.add(despatchAdviceShipNoticeShipmentReference);
		} else if (!lstDesadvShipNoitceShipmentReference.contains(despatchAdviceShipNoticeShipmentReference)) {
			lstDesadvShipNoitceShipmentReference.add(despatchAdviceShipNoticeShipmentReference);
		}
	}
}
